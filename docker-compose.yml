version: '3.8'

services:
  db:
    image: postgres:15
    container_name: my_postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./be
      dockerfile: Dockerfile
    container_name: echo_backend
    ports:
      - "5001:5001"
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGHOST: ${PGHOST}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      PGPORT: ${PGPORT}
      JWT_SECRET: ${JWT_SECRET}

      # GitHub OAuth
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: ${PORT}

  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
    container_name: echo_frontend
    ports:
      - "5173:5173"
    depends_on:
      - backend
    environment:
      VITE_API_BASE_URL: "http://localhost:5001"
    volumes:
      # 1) Mount your entire FE folder into /app, but exclude node_modules to avoid conflicts
      - ./fe:/app

      # 2) If you want to preserve the containerâ€™s installed `node_modules`
      #    create an anonymous volume so you don't overwrite it with your host
      #    This ensures Docker doesn't blow away node_modules with an empty local folder
      - /app/node_modules

  code-analysis:
    build:
      context: ./code-analysis-pipeline  # Path to your code analysis folder
      dockerfile: Dockerfile  # Dockerfile for code analysis container
    container_name: code_analysis
    environment:
      GITHUB_REPO_URL: ${GITHUB_REPO_URL}  # Repo URL to clone and analyze
    depends_on:
      - backend
    volumes:
      - ./be:/repo/be
      - ./fe:/repo/fe
      - ./db:/repo/db
    entrypoint: ["python3", "repo_analyzer.py"]  # Run the code analysis script
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge
