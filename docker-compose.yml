services:
  db:
    build: ./DB
    container_name: echo_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: echo_db
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [echo_network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile   # <â€” capital D (your C++ Crow image)
    container_name: echo_backend
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      REPOS_PATH: /app/data/repositories
      SUMMARIES_PATH: /app/data/summaries
      DATABASE_URL: postgresql://postgres:password@db:5432/echo_db
    ports: ["8000:8000"]
    volumes:
      - backend_repos:/app/data/repositories
      - backend_summaries:/app/data/summaries
    depends_on:
      db:
        condition: service_healthy
    networks: [echo_network]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/api/health > /dev/null || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: echo_frontend
    environment:
      NEXT_TELEMETRY_DISABLED: "1"
      CHOKIDAR_USEPOLLING: "1"
      WATCHPACK_POLLING: "1"
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE: "http://backend:8000/api"
    ports: ["3000:3000"]
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    depends_on:
      backend:
        condition: service_healthy
    networks: [echo_network]
    restart: unless-stopped

networks:
  echo_network:
    driver: bridge

volumes:
  postgres_data:
  backend_repos:
  backend_summaries:
