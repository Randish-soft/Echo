# Edge reverse proxy for the stack: routes /api to the API container, everything else to the web app.
# Assumes docker network service names: "api" (port 8080) and "web" (port 80).

worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  tcp_nopush    on;
  tcp_nodelay   on;
  keepalive_timeout  65;
  server_tokens off;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/xml image/svg+xml;
  gzip_min_length 1024;

  # Upstreams
  upstream api_upstream {
    server api:8080;
    keepalive 32;
  }

  upstream web_upstream {
    server web:80;
    keepalive 32;
  }

  # Main server
  server {
    listen 80;
    server_name _;

    # Healthcheck
    location = /healthz {
      return 200 "ok";
      add_header Content-Type text/plain;
    }

    # API
    location /api/ {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";

      proxy_read_timeout 60s;
      proxy_send_timeout 60s;

      proxy_pass http://api_upstream$request_uri;
    }

    # Everything else -> web SPA
    location / {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";

      proxy_read_timeout 60s;
      proxy_send_timeout 60s;

      proxy_pass http://web_upstream;
    }

    # Security headers (basic hardening)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy no-referrer-when-downgrade always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
  }
}
